{
  "name": "fantasy-scoring",
  "version": "1.0.0",
  "description": "",
  "main": ".eslintrc.js",
  "scripts": {
    "lint": "./node_modules/.bin/eslint --format codeframe .",
    "lint:fix": "./node_modules/.bin/eslint --fix --format codeframe .",
    "test": "./node_modules/.bin/mocha tests.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stackeducation/fantasy-scoring.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/stackeducation/fantasy-scoring/issues"
  },
  "homepage": "https://github.com/stackeducation/fantasy-scoring#readme",
  "devDependencies": {
    "chai": "^4.2.0",
    "eslint": "^6.8.0",
    "mocha": "^7.1.2"
  }
}33 1:35 PM
function calculateScore(player) {
switch(player.position){
  case 'QB':
   return QB(player.stats)
  case 'RB':
    return RB(player.stats)
  case 'WR':
    return WR(player.stats)
  case 'TE':
    return TE(player.stats)
  default:
    return 0
  }
}
   function QB(playerStats) {
    score = 0
    score = (playerStats.passing.yards / 25) + (playerStats.passing.touchdowns * 6) + (playerStats.passing.interceptions * -3) + score
    score = (playerStats.rushing.yards / 10) + (playerStats.rushing.touchdowns * 6) + (playerStats.rushing.fumbles * -3) + score
    return score
  }
  function RB(playerStats) {
    score = 0
    score = (playerStats.rushing.yards / 10) + (playerStats.rushing.touchdowns * 6) + (playerStats.rushing.fumbles * -3) + score
    score = (playerStats.receiving.receptions) + (playerStats.receiving.yards / 10) + (playerStats.receiving.touchdowns * 6) + (playerStats.receiving.fumbles * -3) + score
    score = (playerStats.return.kickreturn.yards / 15) + (playerStats.return.kickreturn.touchdowns * 6) + (playerStats.return.kickreturn.fumbles * -3) + score
    score = (playerStats.return.puntreturn.yards / 15) + (playerStats.return.puntreturn.touchdowns * 6) + (playerStats.return.puntreturn.fumbles * -3) + score
    return score
  }
  function WR(playerStats) {
    score = 0
    score = (playerStats.rushing.yards / 10) + (playerStats.rushing.touchdowns * 6) + (playerStats.rushing.fumbles * -3) + score
    score = (playerStats.receiving.receptions) + (playerStats.receiving.yards / 10) + (playerStats.receiving.touchdowns * 6) + (playerStats.receiving.fumbles * -3) + score
    score = (playerStats.return.kickreturn.yards / 15) + (playerStats.return.kickreturn.touchdowns * 6) + (playerStats.return.kickreturn.fumbles * -3) + score
    score = (playerStats.return.puntreturn.yards / 15) + (playerStats.return.puntreturn.touchdowns * 6) + (playerStats.return.puntreturn.fumbles * -3) + score
    return score
  }
  function TE(playerStats) {
    score = 0
    score = (playerStats.receiving.receptions) + (playerStats.receiving.yards / 10) + (playerStats.receiving.touchdowns * 6) + (playerStats.receiving.fumbles * -3) + score
    return score
  }
module.exports = calculateScore
1:37
$ npm test
> fantasy-scoring@1.0.0 test C:\Users\18573\Desktop\fantasy-scoring
> mocha tests.js
  calculateScore
    √ returns the score for a quarterback
    √ returns the score for a running back
    √ returns the score for a receiver
    √ returns the score for a tightend
    √ returns 0 when position is unknown
